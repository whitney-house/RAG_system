import React, { useState } from "react";
import ReactMarkdown from "react-markdown";
import axios from "axios";

const Chat = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || "http://localhost:8000";

  const cleanText = (text) => {
    return text
      .replace(/\[.*?\]/g, "") // remove [SYSTEP Insta] 
      .replace(/\b(?:none|None|NONE)\b/g, "") // remove"none"
      .replace(/<[^>]*>/g, "") // remove <<PUB>> error generated by AI
      .replace(/\s+/g, " ") 
      .trim();
  };

  const extractValidRecipes = (text) => {
    const recipes = text
      .split(/Recipe:/)
      .map((r) => cleanText(r))
      .filter((r) => r && !r.includes("cdffvfd") && r.includes("Ingredients:") && r.includes("Steps:"));
    
    return recipes;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;
    
    //Input not kept in the chat 
    const userInput = input;

    setInput("");

    setLoading(true);
    try {
      setMessages((prev) => [...prev, { role: "user", content: input }]);

      const response = await axios.post(`${API_BASE_URL}/api/chat`, {
        message: userInput,
        max_tokens: 1000,
      });

      if (response.data && response.data.answer) {
        let answerRecipes = extractValidRecipes(response.data.answer);
        let sourceRecipes = response.data.sources
          ? response.data.sources.flatMap((s) => extractValidRecipes(s))
          : [];

        // get the best answer
        let bestRecipe = answerRecipes.length > 0 ? answerRecipes[0] : sourceRecipes[0] || "‚ö†Ô∏è No valid recipe found.";

        setMessages((prev) => [...prev, { role: "bot", content: `###  Recipe:\n\n${bestRecipe}` }]);
      } else {
        setMessages((prev) => [...prev, { role: "bot", content: "‚ö†Ô∏è No response from AI." }]);
      }
    } catch (error) {
      console.error("Error:", error);
      setMessages((prev) => [...prev, { role: "bot", content: "‚ö†Ô∏è API Error. Try again later." }]);
    }

    setLoading(false);
    setInput("");
  };

  return (
    <div className="chat-container">
      <div className="messages">
        {messages.map((msg, i) => (
          <div key={i} className={`message ${msg.role}`}>
            <ReactMarkdown>{msg.content}</ReactMarkdown>
          </div>
        ))}
        {loading && <div className="loading">ü§î Thinking...</div>}
      </div>

      <form onSubmit={handleSubmit}>
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          placeholder="Ask about a recipe..."
        />
        <button type="submit" disabled={loading}>
          {loading ? "..." : "Send"}
        </button>
      </form>
    </div>
  );
};

export default Chat;